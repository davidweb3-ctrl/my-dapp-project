'use client';

import { useState, useEffect } from 'react';
import { useAccount, useReadContract, useWriteContract, useWaitForTransactionReceipt, useSignTypedData } from 'wagmi';
import { CONTRACT_ADDRESSES, NFTMarket_ABI, MyNFT_ABI, MyERC20_ABI } from '../../utils/contracts';
import { formatUnits, parseUnits } from 'viem';

interface Listing {
  tokenId: number;
  seller: string;
  price: bigint;
  isListed: boolean;
}

/**
 * Market Page
 * Interact with NFTMarket contract
 * - View listed NFTs
 * - Buy NFTs
 * - List your NFTs for sale
 * - Buy with whitelist signature (permitBuy)
 */
export default function MarketPage() {
  const { address, isConnected } = useAccount();
  const [listTokenId, setListTokenId] = useState('');
  const [listPrice, setListPrice] = useState('');
  const [buyTokenId, setBuyTokenId] = useState('');
  const [viewTokenId, setViewTokenId] = useState('');
  const [listingInfo, setListingInfo] = useState<Listing | null>(null);
  
  // For whitelist buying
  const [whitelistTokenId, setWhitelistTokenId] = useState('');
  const [whitelistDeadline, setWhitelistDeadline] = useState('');

  const { writeContract, data: hash, isPending } = useWriteContract();
  const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({ hash });

  // Read listing info
  const { data: listing, refetch: refetchListing } = useReadContract({
    address: CONTRACT_ADDRESSES.NFTMarket as `0x${string}`,
    abi: NFTMarket_ABI,
    functionName: 'getListing',
    args: viewTokenId ? [BigInt(viewTokenId)] : undefined,
    query: {
      enabled: !!viewTokenId,
    },
  });

  useEffect(() => {
    if (listing) {
      const [seller, price, isListed] = listing as [string, bigint, boolean];
      setListingInfo({
        tokenId: parseInt(viewTokenId),
        seller,
        price,
        isListed,
      });
    }
  }, [listing, viewTokenId]);

  // Handle list NFT
  const handleList = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!listTokenId || !listPrice) return;

    try {
      writeContract({
        address: CONTRACT_ADDRESSES.NFTMarket as `0x${string}`,
        abi: NFTMarket_ABI,
        functionName: 'list',
        args: [BigInt(listTokenId), parseUnits(listPrice, 18)],
      });
    } catch (error) {
      console.error('List error:', error);
    }
  };

  // Handle buy NFT
  const handleBuy = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!buyTokenId) return;

    try {
      writeContract({
        address: CONTRACT_ADDRESSES.NFTMarket as `0x${string}`,
        abi: NFTMarket_ABI,
        functionName: 'buyNFT',
        args: [BigInt(buyTokenId)],
      });
    } catch (error) {
      console.error('Buy error:', error);
    }
  };

  // Approve market to spend tokens
  const handleApproveToken = async (amount: string) => {
    if (!amount) return;

    try {
      writeContract({
        address: CONTRACT_ADDRESSES.MyERC20 as `0x${string}`,
        abi: MyERC20_ABI,
        functionName: 'approve',
        args: [CONTRACT_ADDRESSES.NFTMarket as `0x${string}`, parseUnits(amount, 18)],
      });
    } catch (error) {
      console.error('Approve error:', error);
    }
  };

  // Approve market to transfer NFT
  const handleApproveNFT = async (tokenId: string) => {
    if (!tokenId) return;

    try {
      writeContract({
        address: CONTRACT_ADDRESSES.MyNFT as `0x${string}`,
        abi: MyNFT_ABI,
        functionName: 'approve',
        args: [CONTRACT_ADDRESSES.NFTMarket as `0x${string}`, BigInt(tokenId)],
      });
    } catch (error) {
      console.error('Approve NFT error:', error);
    }
  };

  // Handle whitelist buy with signature
  const handleWhitelistBuy = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!whitelistTokenId || !whitelistDeadline || !listingInfo) return;

    // Note: In production, you would get this signature from your backend
    // For demo purposes, this shows the structure
    alert('Whitelist buying requires a valid signature from the market owner. This is typically generated by the project backend and verified on-chain using EIP-712.');
  };

  // View listing
  const handleViewListing = (e: React.FormEvent) => {
    e.preventDefault();
    refetchListing();
  };

  if (!isConnected) {
    return (
      <div className="px-4 py-8">
        <div className="max-w-3xl mx-auto text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">NFT Market</h1>
          <p className="text-lg text-gray-600">Please connect your wallet to continue</p>
        </div>
      </div>
    );
  }

  return (
    <div className="px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">NFT Marketplace</h1>

        {/* View Listing */}
        <div className="bg-white shadow rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">View Listing</h2>
          <form onSubmit={handleViewListing} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Token ID
              </label>
              <div className="flex space-x-2">
                <input
                  type="number"
                  value={viewTokenId}
                  onChange={(e) => setViewTokenId(e.target.value)}
                  placeholder="0"
                  min="0"
                  className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
                <button
                  type="submit"
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  View
                </button>
              </div>
            </div>
          </form>
          {listingInfo && listingInfo.isListed && (
            <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <p className="text-sm text-gray-600">
                <strong>Seller:</strong> <code className="text-xs">{listingInfo.seller}</code>
              </p>
              <p className="text-sm text-gray-600 mt-1">
                <strong>Price:</strong> {formatUnits(listingInfo.price, 18)} MERC20
              </p>
            </div>
          )}
          {listingInfo && !listingInfo.isListed && viewTokenId && (
            <div className="mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <p className="text-sm text-gray-600">This NFT is not currently listed for sale.</p>
            </div>
          )}
        </div>

        {/* List NFT */}
        <div className="bg-white shadow rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">List Your NFT</h2>
          <form onSubmit={handleList} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Token ID
              </label>
              <input
                type="number"
                value={listTokenId}
                onChange={(e) => setListTokenId(e.target.value)}
                placeholder="0"
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Price (MERC20)
              </label>
              <input
                type="number"
                value={listPrice}
                onChange={(e) => setListPrice(e.target.value)}
                placeholder="0.0"
                step="0.000000000000000001"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <div className="flex space-x-4">
              <button
                type="button"
                onClick={() => handleApproveNFT(listTokenId)}
                disabled={isPending || isConfirming}
                className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                1. Approve NFT
              </button>
              <button
                type="submit"
                disabled={isPending || isConfirming}
                className="flex-1 bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                2. List
              </button>
            </div>
          </form>
        </div>

        {/* Buy NFT */}
        <div className="bg-white shadow rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Buy NFT</h2>
          <form onSubmit={handleBuy} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Token ID to Buy
              </label>
              <input
                type="number"
                value={buyTokenId}
                onChange={(e) => setBuyTokenId(e.target.value)}
                placeholder="0"
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <div className="flex space-x-4">
              <button
                type="button"
                onClick={() => {
                  // Get price from listing first
                  if (listingInfo && listingInfo.tokenId.toString() === buyTokenId) {
                    handleApproveToken(formatUnits(listingInfo.price, 18));
                  } else {
                    alert('Please view the listing first to see the price');
                  }
                }}
                disabled={isPending || isConfirming}
                className="flex-1 bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                1. Approve Token
              </button>
              <button
                type="submit"
                disabled={isPending || isConfirming}
                className="flex-1 bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                2. Buy
              </button>
            </div>
          </form>
        </div>

        {/* Whitelist Buy */}
        <div className="bg-white shadow rounded-lg p-6 mb-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-4">Whitelist Buy (with Signature)</h2>
          <form onSubmit={handleWhitelistBuy} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Token ID
              </label>
              <input
                type="number"
                value={whitelistTokenId}
                onChange={(e) => setWhitelistTokenId(e.target.value)}
                placeholder="0"
                min="0"
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Deadline (Unix Timestamp)
              </label>
              <input
                type="number"
                value={whitelistDeadline}
                onChange={(e) => setWhitelistDeadline(e.target.value)}
                placeholder={Math.floor(Date.now() / 1000 + 3600).toString()}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
              />
            </div>
            <button
              type="submit"
              className="w-full bg-yellow-600 text-white py-2 px-4 rounded-lg hover:bg-yellow-700 transition-colors"
            >
              Request Whitelist Purchase
            </button>
          </form>
        </div>

        {/* Transaction Status */}
        {isConfirmed && (
          <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
            <p className="text-green-800">Transaction confirmed!</p>
            {hash && (
              <p className="text-sm text-green-600 mt-1 break-all">
                Hash: {hash}
              </p>
            )}
          </div>
        )}

        {/* Info */}
        <div className="bg-blue-50 border border-blue-200 rounded-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-2">How to Use</h3>
          <ol className="list-decimal list-inside space-y-2 text-sm text-gray-600">
            <li><strong>To List:</strong> Approve NFT transfer first, then list with a price</li>
            <li><strong>To Buy:</strong> View listing to see price, approve token spending, then buy</li>
            <li><strong>Whitelist Buy:</strong> Requires a valid EIP-712 signature from the market owner (typically provided by the project backend)</li>
          </ol>
          <p className="mt-4 text-xs text-gray-500">
            Contract: <code className="bg-white px-2 py-1 rounded">{CONTRACT_ADDRESSES.NFTMarket}</code>
          </p>
        </div>
      </div>
    </div>
  );
}

